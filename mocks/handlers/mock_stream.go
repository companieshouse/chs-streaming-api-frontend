// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/companieshouse/chs-streaming-api/handlers (interfaces: Stream)

package mock_handlers

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockStream is a mock of Stream interface
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Filter mocks base method
func (m *MockStream) Filter(arg0 *http.Request, arg1 *[]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Filter indicates an expected call of Filter
func (mr *MockStreamMockRecorder) Filter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockStream)(nil).Filter), arg0, arg1)
}

// Transform mocks base method
func (m *MockStream) Transform(arg0 *http.Request, arg1 *[]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transform indicates an expected call of Transform
func (mr *MockStreamMockRecorder) Transform(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockStream)(nil).Transform), arg0, arg1)
}
